<<<<<<< HEAD
function [D, hiC] = getPairsFromCSV(file)
=======
function [D, PT] = getPairsFromCSV(files)
>>>>>>> 5a30bb017a93844d4947196c07b670421916bbee
% Loads csv files generated by NEditor and extracts pairwise distances
% into D. Files can either be a file name, a pattern, or empty for a dialog
% window.
%
% Example:
% D = getPairsFromCSV('*.csv');
% D = getPairsFromCSV('iJC204.csv');
% D = getPairsFromCSV();
%
% Follow by:
%  plotPairs(D)
%  generateParalellBeamer


%% Settings
s.normalize = 0; % Normalize by DAPI diameter

if s.normalize
    normstring = 'n';
else
    normstring = 'd';
end

s.res = [131.08, 131.08, 200]; % Resolution in x, y, z

%% Define what files to load
if exist('file', 'var')
    files = dir(file);
else
    fi = uipickfiles();
    files = [];
    for kk =1:numel(fi)
        files(kk).name = fi{kk};
    end    
end

if numel(files) == 0
    disp('No files to load!')
    return
end


%% Set up conversions between channel
% name and probe number and probe name

%      Chan   Probe  order/number
%             name
% Q1   AF594   2       2
% T7   TMR     3       5
% O72  GFP     1       1
% Q2   Cy5    13       3
% O71  Cy7    14       4

% Q1   AF594   8       10
% T7   TMR     7       9
% O72  GFP     4       6
% Q2   Cy5     5       7
% O71  Cy7     6       8

% Q1   AF594   12      14
% T7   TMR     11      13
% O72  GFP     -
% Q2   Cy5     9       11
% O71  Cy7     10      12

%a488  = O72
%a594  = Q1
%cy5   = Q2
%cy7   = O71
%tmr   = T7

% Define the names of the probes
probenames = [1 2 13 14 3 4 5 6 7 8 9 10 11 12];
cprobenames = num2cell(probenames);
for kk=1:numel(cprobenames)
    cprobenames{kk} = ['p' num2str(cprobenames{kk})];
end

%% Set up and verify the conversion from channel to probe
for ff = 1:numel(files)
    fprintf('--> Loading %s\n', files(ff).name);
    fName = strsplit(files(ff).name, '/');
    fName = fName{end}
    
    if 0
        if fName(2) == 'J'
            % if iJC204 ...
            Chan = {'a594', 'tmr', 'gfp', 'cy5', 'cy7'};
            switch fName(6)
                case '2'
                    chan2probe{ff}=[2 5 1 3 4];
                case '3'
                    chan2probe{ff}=[2 5 1 3 4];
                case '4'
                    chan2probe{ff}=[10 9 6 7 8];
                case '5'
                    chan2probe{ff}=[10 9 6 7 8];
                case '6'
                    chan2probe{ff}=[14 13 NaN 11 12];
                case '7'
                    chan2probe{ff}=[14 13 NaN 11 12];
            end
        end
        if fName(2) == 'M'
            % if iMB31 ...
            Chan = {'a594', 'tmr', 'a488', 'cy5', 'cy7'};
            switch str2num(fName(4:5))
                case 31
                    chan2probe{ff}=[10 9 6 7 8];
            end
        end
    end
    
    if strcmp(fName, 'iMB31_002.csv')
        Chan{ff} = {'a594', 'tmr', 'a488', 'cy5', 'cy7'};
        chan2probe{ff}=[10 9 6 7 8];
    end
    
    if strcmp(fName, 'iMB31_002_ew.csv')
        Chan{ff} = {'a594', 'tmr', 'a488', 'cy5', 'cy7'};
        chan2probe{ff}=[10 9 6 7 8];
    end
    
    if strcmp(fName, 'iMB31_002_of.csv')
        Chan{ff} = {'a594', 'tmr', 'a488', 'cy5', 'cy7'};
        chan2probe{ff}=[10 9 6 7 8];
    end
    
    if strcmp(fName(1:5), 'iMB33') 
        Chan{ff} = {'a594', 'tmr', 'a488', 'cy5', 'cy7'};
        chan2probe{ff}=[14 9 1 7 4];
    end
    
    if strcmp(fName(1:5), 'iMB34') 
        Chan{ff} = {'a594', 'tmr', 'a488', 'cy5', 'cy7'};
        chan2probe{ff}=[14, 5, 6, 3, 8];
    end
    
    if strcmp(fName(1:5), 'iMB35') 
        Chan{ff} = {'a594', 'tmr', 'a488', 'cy5', 'cy7'};
        chan2probe{ff}=[2 5 1 3 4];
    end
    
    
    if strcmp(fName(1:6), 'iJC202') || strcmp(fName(1:6), 'iJC203')
        Chan{ff} = {'a594', 'tmr', 'gfp', 'cy5', 'cy7'};
        chan2probe{ff}=[2 5 1 3 4];
    end
            
    if strcmp(fName, 'iJC204.csv')
        Chan{ff} = {'a594', 'tmr', 'gfp', 'cy5', 'cy7'};
        chan2probe{ff}=[10 9 6 7 8];
    end
    
    if strcmp(fName, 'iJC205.csv')
        Chan{ff} = {'a594', 'tmr', 'gfp', 'cy5', 'cy7'};
        chan2probe{ff}=[10 9 6 7 8];
    end
    
    if strcmp(fName(1:6), 'iJC206') || strcmp(fName(1:6), 'iJC207')
        Chan{ff} = {'a594', 'tmr', 'gfp', 'cy5', 'cy7'};
        chan2probe{ff}=[14 13 NaN 11 12];
    end
    
    fprintf('Conversion table:\n')
    fprintf('chan \t # \t name\n');
    for kk = 1:numel(Chan{ff})
        fprintf('%s \t %d \t %s \n', Chan{ff}{kk}, chan2probe{ff}(kk), cprobenames{kk});
    end
    fprintf('\n')
    
end


disp('Press enter to continue if all looks fine')
pause

%% Set up measurements of euclidean vs genomic distances
% Position along DNA
probePos = [26454882.5
    27015657
    28214887.5
    28695441.5
    29455632
    29520921.5
    30298116
    32804382
    33387551.5
    34556685.5
    35185039.5
    36167821
    27102949.5
    27747137];
probePos = probePos*0.34; % Conversion to nm

hiC = [ ...
    0   73	150	66	55	14	5	7	20	14	14	6	2	1
    0   0   402	189	38	52	34	23	9	9	2	1	1	0
    0   0   0   959	121	42	21	17	14	6	6	1	5	2
    0   0   0   0   136	98	36	33	9	8	1	4	2	0
    0   0   0   0   0   93	23	38	33	21	3	3	1	0
    0   0   0   0   0   0   210	176	30	14	4	0	0	0
    0   0   0   0   0   0   0   2296 29	23	1	0	3	1
    0   0   0   0   0   0   0   0   40	30	1	4	0	0
    0   0   0   0   0   0   0   0   0   47	32	13	9	2
    0   0   0   0   0   0   0   0   0   0   68	6	7	2
    0   0   0   0   0   0   0   0   0   0   0   61	48	3
    0   0   0   0   0   0   0   0   0   0   0   0   337	5
    0   0   0   0   0   0   0   0   0   0   0   0   0   17
    0   0   0   0   0   0   0   0   0   0   0   0   0   0];




%% Prepare some outputs
D = cell(14,14); % summed distances
Dm = zeros(numel(probenames));
Dmed = zeros(numel(probenames));
Ds = zeros(numel(probenames));
H = zeros(5,1);
PT = [];

jj = 0;
de = []; % Euclidean
dg = []; % Genomic


sameNames = 0; % Track the number of times that there were two dots in the same channel
nAllele = 0; % Number of current allele (only used counted).
for ff = 1:numel(files)
    fprintf('--> Loading %s\n', files(ff).name);
    
    
    t = readtable(files(ff).name);
    t = table2cell(t);
    
    startPos = 1;
    P = getAllele(t, startPos);
    
    while numel(P)>0
        startPos = startPos+size(P,1);
        
        if numel(P)>0 && size(P,1)<= numel(H)
            H(size(P,1)) = H(size(P,1))+1;
        end
        % calculate all pairwise distances
        if numel(P(:,4))==numel(unique(P(:,4)))
            nAllele = nAllele+1;
            
            for kk = 1:size(P,1)
                for ll = kk+1:size(P,1)
                    p = [P{kk, 5:7}].*s.res;
                    fp = find(strcmp(P{kk, 4}, Chan{ff})==1);
                    pn = chan2probe{ff}(fp);
                    
                    q = [P{ll, 5:7}].*s.res;
                    fq = find(strcmp(P{ll, 4}, Chan{ff})==1);
                    qn = chan2probe{ff}(fq);
                    
                    temp = [qn, pn];
                    qn = max(temp);
                    pn = min(temp);
                    
                    assert(pn>0);
                    
                    qName = probenames(qn);
                    pName = probenames(pn);
                    
                    if pName == qName
                        sameNames = sameNames +1;
                    end
                    
                    d = norm(p-q);
                    if s.normalize
                        d = d*116/(2*(P{1,20}/pi)^(1/2));
                    end
                    
                    if d == 0
                        disp(['Distance == 0 for ' files(ff).name]);
                        disp('Forgot CC?')
                    end
                    
                    D{qn, pn} = [D{qn, pn}; d];
                    %pause
                    jj = jj+1;
                    de(jj)=d;
                    dG = abs(probePos(qName)-probePos(pName));
                    dg(jj)=dG;
                    
                    if qn==pn+1
                        conDistNorm = 1; % normalize by genomic distance or not
                        if conDistNorm ==1
                            conDist(nAllele, pn) = d/dG;
                        else
                            conDist(nAllele, pn) = d;
                        end
                    end
                    
                    PT = [PT; [pName qName d]];
                end
            end
        end
        P = getAllele(t, startPos);
    end
    size(PT);
    D
end

disp('')
disp('-- > Summary: ')
disp('')

disp('Settings:')
disp(s)

if sameNames >0
    fprintf('Multiple dots in the same channel %d times\n', sameNames);
end

disp('Dots per allele')
disp(H)
disp('Returning a matrix with pairwise distances')

end