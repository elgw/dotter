function sout = A_settings(s)
% Is called by A_cells.m and presents a gui for some settings

% For debug
if nargin == 0
    s.folder = '/my/folder';
    s.dapiGUI = 1;
    s.dapiWS = 0;
    s.dapiManual = 1;
    s.maskDilation = 0;
    s.channels = {'vanilla','raspberry', 'apple', 'coffee'}; % and DAPI
    s.nTrueDots = [10, 4, 6, 8];
    s.dapichannel = 'dapi';
    s.voxelSize = [120,120,300];
    s.threeD = 0;    
end

% This is weird design since we don't know the voxel size yet
% however, the pixel size dependent settings are updated at <tag1>
% before returning

s.dotSettings = {};
for kk = 1:numel(s.channels)
    s.dotSettings{kk} = dotCandidates('getDefaults', 'channel', s.channels{kk}, 'voxelSize', [130,130,300]);
end

exptype = 1;
localizationMethods = s.dotSettings{1}.localizationMethods;
defaultLocationMethod = 1;
rankingMethods = s.dotSettings{1}.rankingMethods;
defaultRankingMethod = 3;

gui.win = figure('Position', [000,000,500,600], 'Menubar', 'none', ...
    'NumberTitle','off', ...
    'Name', 'Find nuclei and dots', ...
    'Resize', 'On', ...
    'WindowKeyPressFcn', @shortcuts);

gui.cUse = []; % Use channel or not
gui.cNdots = []; % Number of dots
gui.cName = []; % name of channel

sout = [];
allok = 0;

tabg = uitabgroup(gui.win,'Position',[0 0 1 1], 'SelectionChangedFcn', @readsettings);
tabExp = uitab(tabg, 'Title', 'Experiment');
tabNuc = uitab(tabg, 'Title', 'Nuclei');
tabDot = uitab(tabg, 'Title', 'Dots');
tabSum = uitab(tabg, 'Title', 'Summary');


gui.qtypePanel = uipanel(tabExp, 'Position', [0, 0, 1, .5], 'Title', 'Experiment info');

gui.qsegPanel = uipanel(tabNuc, 'Position', [0, .5, 1, .5], 'Title', 'Segment Cells?');
gui.segPanel  = uipanel(tabNuc, 'Position', [0, .0, 1, .5], 'Title', 'Segmentation Options');

gui.dotPanel  = uipanel(tabDot, 'Position', [0, .5, 1, .5], 'Title', 'Dot Options');
gui.dotCPanel  = uipanel(tabDot, 'Position', [0, 0, 1, .5], 'Title', 'Per Channel');
gui.menuPanel  = uipanel(tabSum, 'Position', [0, 0, 1, .1], 'Title', '');

gui.expPanel  = uipanel(tabExp, 'Position', [0, .5, 1, .5], 'Title', 'Folder info');

gui.folderInfo = uicontrol(gui.expPanel, 'Style','text',...
    'String', ['Folder: ' s.folder],...
    'Units', 'Normalized', ...
    'Position', [0, 0, 1, 1], ...
    'HorizontalAlignment','left', ...
    'FontName', get(0,'FixedWidthFontName'));

%% gui.qsegPanel: Segment Cells?
gui.r1 = uicontrol('Style', 'Radiobutton', 'String', 'Segment nuclei!', ...
    'Units', 'Normalized', ...
    'Position', [.05, .3, .90, .1], ...
    'Callback', @gui_update, ...
    'Parent', gui.qsegPanel, 'Value', 1);

gui.r2 = uicontrol('Style', 'Radiobutton', ...
    'Units', 'Normalized', ...
    'String', 'Keep existing segmentation', ...
    'Position', [.05, .2, .90, .1], ...
    'Callback', @gui_update, ...
    'Parent', gui.qsegPanel, 'Value', 0);

gui.r3 = uicontrol('Style', 'Radiobutton', ...
    'String', 'Load segmentation mask(s) generated externally', ...
    'Units', 'Normalized', ...
    'Position', [.05, .1, .90, .1], ...
    'Callback', @gui_update , ...
    'Parent', gui.qsegPanel, 'Value', 0);

gui.isDNAFISH = uicontrol('Style', 'Radiobutton', 'String', 'DNA FISH', ...
    'Units', 'Normalized', ...
    'Position', [.1, .6, .8, .1], ...
    'Callback', @gui_update, ...
    'Parent', gui.qtypePanel, 'Value', 1);

gui.generatePvsE = uicontrol('Style', 'Checkbox', 'String', 'Plot PvsE', ...
    'Units', 'Normalized', ...
    'Position', [.5, .6, .8, .1], ...
    'Parent', gui.qtypePanel, 'Value', 1);


gui.r4 = uicontrol('Style', 'Radiobutton', ...
    'String', 'RNA FISH', ...
    'Units', 'Normalized', ...
    'Position', [.1, .5, .8, .1], ...
    'Callback', @gui_update, ...
    'Parent', gui.qtypePanel, 'Value', 0);

uicontrol( ...
    'Style', 'text', ...
    'String', 'kmers per probe', ...
    'Units', 'Normalized', ...
    'Position', [.1, .3, .4, .1], ...
    'Parent', gui.qtypePanel);

gui.nkmers = uicontrol( ...
    'Style', 'edit', ...
    'String', '96', ...
    'Units', 'Normalized', ...
    'Position', [.5, .3, .4, .1], ...
    'Parent', gui.qtypePanel);

uicontrol( ...
    'Style', 'text', ...
    'String', 'Pixel size', ...
    'Units', 'Normalized', ...
    'Position', [.1, .15, .4, .1], ...
    'Parent', gui.qtypePanel);

gui.xres = uicontrol( ...
    'Style', 'edit', ...
    'String', '130', ...
    'Units', 'Normalized', ...
    'Position', [.5, .15, .1, .1], ...
    'Parent', gui.qtypePanel, ...
    'KeyReleaseFcn', @resChange, ...
    'Callback', @resChange);

gui.yres = uicontrol( ...
    'Style', 'text', ...
    'String', 'x ? x', ...
    'Units', 'Normalized', ...
    'Position', [.6, .14, .2, .1], ...
    'Parent', gui.qtypePanel);

gui.zres = uicontrol( ...
    'Style', 'edit', ...
    'String', '300', ...
    'Units', 'Normalized', ...
    'Position', [.8, .15, .1, .1], ...
    'Parent', gui.qtypePanel);


if 0
    gui.useExistingSegmentation = uicontrol('Style', 'listbox', 'String', {'Segment Cells', 'Use Existing Segmentation'}, ...
        'Position', [30,0,250,40], ...
        'Value', 1, ...
        'Callback', @gui_update, ...
        'Parent', gui.mainPanel);
end

gui.dapiGUI = uicontrol('Style', 'checkbox', 'String', 'Supervised in GUI', ...
    'Position', [30,120,150,20], ...
    'Value', s.dapiGUI, ...
    'Parent', gui.segPanel);

gui.dapiWS = uicontrol('Style', 'checkbox', 'String', 'Watershed', ...
    'Position', [30,90,150,20], ...
    'Value', s.dapiWS, ...
    'Parent', gui.segPanel);

gui.dapi3d = uicontrol('Style', 'checkbox', 'String', '3D segmentation', ...
    'Position', [30,60,150,20], ...
    'Value', s.threeD, ...
    'Parent', gui.segPanel);

%gui.dapiManual = uicontrol('Style', 'checkbox', 'String', 'DAPI Manual', ...
%    'Position', [30,60,150,20], ...
%    'Value', s.dapiManual, ...
%    'Parent', gui.segPanel);

uicontrol( ...
    'Style', 'text', ...
    'String', 'Mask dilation', ...
    'Position', [30,30,100,20], ...
    'Parent', gui.segPanel);

gui.maskDilation = uicontrol( ...
    'Style', 'edit', ...
    'String', num2str(s.maskDilation), ...
    'Position', [140,30,100,20], ...
    'Parent', gui.segPanel);

uicontrol('Style', 'text', ...
    'String', 'Localization:', ...
    'Units', 'Normalized', ...
    'Position', [.1,.9,.4,.1], ...
    'Parent', gui.dotPanel);

gui.localization = uicontrol('Style', 'popup', ...
    'Units', 'Normalized', ...
    'Position', [.5,.9,.4,.1], ...
    'String', localizationMethods, ...
    'Value', defaultLocationMethod, ...
    'Parent', gui.dotPanel);

uicontrol('Style', 'text', ...
    'String', 'Ranking:', ...
    'Units', 'Normalized', ...
    'Position', [.1,.75,.4,.1], ...
    'Parent', gui.dotPanel);

gui.ranking = uicontrol('Style', 'popup', ...
    'Units', 'Normalized', ...
    'Position', [.5,.75,.4,.1], ...
    'String', rankingMethods, ...
    'Value', defaultRankingMethod, ...
    'Parent', gui.dotPanel);

uicontrol('Style', 'text', ...
    'String', 'Refinement:', ...
    'Units', 'Normalized', ...
    'Position', [.1,.6,.4,.1], ...
    'Parent', gui.dotPanel);

gui.refinement = uicontrol('Style', 'popup', ...
    'Units', 'Normalized', ...
    'Position', [.5,.6,.4,.1], ...
    'String', s.dotSettings{1}.refinementMethods, ...
    'Value', find(strcmp(s.dotSettings{1}.refinementMethods, s.dotSettings{1}.refinement)), ...
    'Parent', gui.dotPanel);

uicontrol('Style', 'text', ...
    'String', 'MAX # dots', ...
    'Units', 'Normalized', ...
    'Position', [.1,.45,.4,.1], ...
    'Parent', gui.dotPanel);

gui.maxNpoints = uicontrol(...
    'Style', 'edit', ...
    'String', num2str(s.dotSettings{1}.maxNpoints), ...
    'Units', 'Normalized', ...
    'Position', [.5,.45,.4,.1], ...
    'Parent', gui.dotPanel);

uicontrol('Style', 'text', ...
    'String', 'Calculate FWHM', ...
    'Units', 'Normalized', ...
    'Position', [.1,.3,.4,.1], ...
    'Parent', gui.dotPanel);

gui.nFWHM = uicontrol('Style', 'Edit', ...
    'String', '1000', ...
    'Units', 'Normalized', ...
    'Position', [.5,.3,.4,.1], ...
    'Parent', gui.dotPanel);

gui.calcFWHM = uicontrol('Style', 'checkbox', ...
    'Value', s.dotSettings{1}.calcFWHM, ...
    'Units', 'Normalized', ...
    'Position', [.95,.3,.05,.1], ...
    'Parent', gui.dotPanel);

uicontrol('Style', 'text', ...
    'String', 'Dots per G1-Cell',...
    'Position', [30,210,200,20], ...
    'Parent', gui.dotCPanel);

%% Channels
offset = 210;
for kk = 1:numel(s.channels)
    gui.cUse(kk) = uicontrol('Style', 'checkbox', ...
        'Position', [10 offset-(kk)*40 30 30], ...
        'Value', 1, ...
        'Parent', gui.dotCPanel);
    gui.cNdots(kk) = uicontrol('Style', 'edit', ...
        'String', sprintf('%d', s.nTrueDots(kk)), ...
        'Position', [50 offset-(kk)*40 50 30], ...
        'Parent', gui.dotCPanel);
    gui.cName(kk) = uicontrol('Style','text',...
        'String',s.channels{kk},...
        'Position',[120 offset-(kk)*40 130 30], ...
        'Parent', gui.dotCPanel);
end

kk = numel(s.channels)+1;
uicontrol('Style', 'pushbutton', ...
    'String', 'Ok', ...
    'Units', 'Normalized', ...
    'Position',[.6 .0 .2 1], ...
    'Callback', @ok, ...
    'Parent', gui.menuPanel);

uicontrol(tabSum, 'Style', 'pushbutton', ...
    'String', 'Cancel', ...
    'Units', 'Normalized', ...
    'Position',[.2 .0 .2 1], ...
    'Callback', @cancel, ...
    'Parent', gui.menuPanel);

gui.summary = uicontrol('Style', 'text', ...
    'Units', 'Normalized', ...
    'Position', [0, .15, 1, .85], ...
    'String', '...', ...
    'HorizontalAlignment','left', ...
    'FontName', get(0,'FixedWidthFontName'), ...
    'Parent', tabSum);

info.nFields = numel(dir([s.folder 'dapi*.tif']));

info.existCalc = exist([s.folder(1:end-1) '_calc/'], 'dir');

gui_update()

uiwait(gui.win);
if(isvalid(gui.win))
    close(gui.win);
end

if ~allok
    sout = [];
end


    function gui_update(varargin)
        if numel(varargin)>0
            varargin{1}
            if varargin{1} == gui.r1                
                set(gui.r1, 'Value', 1);
                set(gui.r2, 'Value', 0);
                set(gui.r3, 'Value', 0);
            end
            if varargin{1} == gui.r2                
                set(gui.r1, 'Value', 0);
                set(gui.r2, 'Value', 1);
                set(gui.r3, 'Value', 0);
            end
            if varargin{1} == gui.r3                
                set(gui.r1, 'Value', 0);
                set(gui.r2, 'Value', 0);
                set(gui.r3, 'Value', 1);
            end            
           
            
            % Exclusive RNA or DNA
            if varargin{1} == gui.r4
                exptype = abs(gui.r4.Value-1);
                set(gui.isDNAFISH, 'Value', exptype);
            end
            if varargin{1} == gui.isDNAFISH
                exptype = gui.isDNAFISH.Value;
                set(gui.r4, 'Value', abs(exptype-1));
            end
            
            if exptype == 1
                gui.generatePvsE.Enable = 'on';
            else
                gui.generatePvsE.Enable = 'off';
            end
            
        end
        
        seg = gui.r1.Value;
        exptype = gui.isDNAFISH.Value;
        
        if exptype == 1
            set(gui.maxNpoints, 'String', '100000');
        else
            set(gui.maxNpoints, 'String', '1000000');
        end
        
        if (seg==0)
            set(gui.segPanel, 'Visible', 'Off')
        end
        if (seg==1)
            set(gui.segPanel, 'Visible', 'On')
        end
        
        %% Update text in gui.folderInfo
        fstring = sprintf('%s\n', s.folder);
        fstring = [fstring sprintf('%d field(s) in folder\n\n', info.nFields)];
        fstring = [fstring sprintf('Channels:\n')];
        for kk = 1:numel(s.channels)
            fstring = [fstring sprintf('%20s  %d nm\n', s.channels{kk}, df_getEmission(s.channels{kk}))];
        end
        
        if isfield(s, 'voxelSize')
        fstring = [fstring, sprintf('\nVoxel size: %d x %d x %d nm\n\n', ...
            s.voxelSize(1), s.voxelSize(2), s.voxelSize(3))];
        else
            fstring = [fstring,sprintf('Voxel sizes not specified, set below\n\n')];
        end
        
        if info.existCalc
            fstring = [fstring, sprintf('\nWarning: Calc folder already exist\n')];
        end
        
        gui.folderInfo.String = fstring;
        resChange();                       
    end

    function resChange(varargin)
        drawnow()
        gui.yres.String = ['x ' gui.xres.String ' x'];
    end

    function gui_loadSegmentationFiles(varargin)
        % Set source for segmentation masks
        s.segmentationSource = {'file1', 'file2'};        
    end

    function readsettings(varargin)
        %keyboard
        sout = s;
        sout.nTrueDots = [];
        sout.channels = {};
        sout.maskDilation = str2num(get(gui.maskDilation, 'String'));
        for kk = 1:numel(s.channels)
            if 0
                fprintf('%d %s %s\n', ...
                    get(gui.cUse(kk), 'Value'), ...
                    get(gui.cNdots(kk), 'String'), ...
                    get(gui.cName(kk), 'String'));
            end
            if get(gui.cUse(kk), 'Value')
                sout.nTrueDots = [sout.nTrueDots, str2num(get(gui.cNdots(kk), 'String'))];
                sout.channels = {sout.channels{:}, get(gui.cName(kk), 'String')};
            end
        end
        sout.dapichannel = s.dapichannel;
        sout.dapiGUI = get(gui.dapiGUI, 'value');
        sout.dapiWS = get(gui.dapiWS, 'value');
        %sout.dapiManual = get(gui.dapiManual, 'value');
        sout.threeD = get(gui.dapi3d, 'value');
        
        for cc = 1:numel(s.channels)
            sout.dotSettings{cc}.calcFWHM = gui.calcFWHM.Value;
            sout.dotSettings{cc}.nFWHM = str2num(gui.nFWHM.String);
            sout.dotSettings{cc}.maxNpoints = str2num(get(gui.maxNpoints, 'String'));
            sout.dotSettings{cc}.localization = localizationMethods{get(gui.localization, 'Value')};            
            sout.dotSettings{cc}.ranking = rankingMethods{get(gui.ranking, 'Value')};
            sout.dotSettings{cc}.refinement = s.dotSettings{1}.refinementMethods(gui.refinement.Value);
        end
        
        sout.segmentNuclei = get(gui.r1, 'Value');
        sout.useExistingSegmentation = get(gui.r2, 'Value');
        sout.askForSegmentationMasks = get(gui.r3, 'Value');
        sout.localizationMethod = get(gui.localization, 'String');
        sout.rankingMethod = get(gui.ranking, 'String');
        
        if(gui.isDNAFISH.Value == 1)
            sout.experimentType = 'DNAFISH';
        else
            sout.experimentType = 'RNAFISH';
        end
        
        sout.nkmers = str2num(gui.nkmers.String);
        sout.generatePvsE = gui.generatePvsE.Value;
        summaryString = evalc('disp(sout)');
        gui.summary.String = summaryString;
        
        sout.voxelSize = [str2num(gui.xres.String)*[1,1],  str2num(gui.zres.String)];
        
        % <tag1>
        for kk = 1:numel(s.channels)
            temp = dotCandidates('getDefaults', 'channel', s.channels{kk}, 'voxelSize', sout.voxelSize);
            sout.dotSettings{kk}.sigmadog = temp.sigmadog;
        end
    end

    function ok(varargin)
        % Leave the GUI if everything about the experiment is correctly
        % in place
        disp('Reading settings from gui');
        readsettings();
        allok = 1;
        
        if numel(sout.nkmers) == 0
            msgbox('Number of kmers per probe not known!')
            allok = 0;
        end
        
        if allok == 1
            disp('Done');
            uiresume(gui.win)
        else
            disp('Can''t continue, there were some errors')
        end
        
        
    end

    function cancel(varargin)
        uiresume(gui.win);
    end

    function shortcuts(varargin)
        % Key strokes go here
        if strcmpi(varargin{2}.Key, 'd')
            disp('<d>, debug');
            keyboard
        end
        if strcmpi(varargin{2}.Key, 'escape')
            disp('<esc>, closing');
            cancel()
        end
        
        key = varargin{2}.Key;
        if strcmp(key, 'return')
            ok()
        end
    end

end